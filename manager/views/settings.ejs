<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('partials/head') %>
</head>
<body>
  <%- include('partials/nav') %>
  
  <main class="main-content">
    <div class="container">
      <h2>Settings</h2>
      
      <div class="settings-sections">
        <section class="settings-section">
          <h3>Registration Tokens</h3>
          <p>Generate tokens for new agent registration</p>
          <button class="btn btn-primary" onclick="generateToken()">Generate New Token</button>
          <div id="token-display" style="display: none; margin-top: 20px;">
            <p><strong>New Registration Token:</strong></p>
            <code id="token-value" style="background: #f5f5f5; padding: 10px; display: block; word-break: break-all;"></code>
            <p style="margin-top: 10px;">Valid for: <span id="token-expiry">1 hour</span></p>
            <p style="margin-top: 15px;"><strong>To register an agent, run:</strong></p>
            <code id="agent-command" style="background: #2d2d2d; color: #f8f8f2; padding: 10px; display: block; border-radius: 4px; font-size: 12px;"></code>
            <button class="btn btn-sm" style="margin-top: 10px;" onclick="copyCommand()">Copy Command</button>
          </div>
        </section>
        
        <section class="settings-section">
          <h3>Notification Settings</h3>
          <form id="notification-settings">
            <div class="form-group">
              <label>Email Notifications</label>
              <input type="email" placeholder="admin@example.com" class="form-input">
            </div>
            <div class="form-group">
              <label>Slack Webhook URL</label>
              <input type="url" placeholder="https://hooks.slack.com/services/..." class="form-input">
            </div>
            <div class="form-group">
              <label>Alert Levels to Notify</label>
              <div class="checkbox-group">
                <label><input type="checkbox" value="info"> Info</label>
                <label><input type="checkbox" value="warning" checked> Warning</label>
                <label><input type="checkbox" value="error" checked> Error</label>
                <label><input type="checkbox" value="critical" checked> Critical</label>
              </div>
            </div>
            <button type="submit" class="btn btn-primary">Save Notification Settings</button>
          </form>
        </section>
        
        <section class="settings-section">
          <h3>System Configuration</h3>
          <div class="config-info">
            <div class="config-row">
              <span class="config-label">Database Location:</span>
              <span class="config-value">./data/control-center.db</span>
            </div>
            <div class="config-row">
              <span class="config-label">WebSocket Port:</span>
              <span class="config-value">3000</span>
            </div>
            <div class="config-row">
              <span class="config-label">Agent Heartbeat Interval:</span>
              <span class="config-value">30 seconds</span>
            </div>
            <div class="config-row">
              <span class="config-label">Log Retention:</span>
              <span class="config-value">30 days</span>
            </div>
          </div>
        </section>
        
        <section class="settings-section">
          <h3>Maintenance</h3>
          <button class="btn" onclick="clearOldLogs()">Clear Old Logs</button>
          <button class="btn" onclick="exportDatabase()">Export Database</button>
          <button class="btn btn-danger" onclick="resetSystem()">Reset System</button>
        </section>
      </div>
    </div>
  </main>
  
  <%- include('partials/footer') %>
  
  <script>
  function generateToken() {
    fetch('/api/tokens', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ expiresIn: 3600000 }) // 1 hour
    })
    .then(r => r.json())
    .then(data => {
      document.getElementById('token-display').style.display = 'block';
      document.getElementById('token-value').textContent = data.token;
      document.getElementById('token-expiry').textContent = '1 hour (expires at ' + new Date(data.expiresAt).toLocaleString() + ')';
      
      // Show the agent command
      const command = `./agent -token="${data.token}" -manager="ws://localhost:3000/ws"`;
      document.getElementById('agent-command').textContent = command;
    })
    .catch(err => alert('Failed to generate token: ' + err.message));
  }
  
  function copyCommand() {
    const command = document.getElementById('agent-command').textContent;
    navigator.clipboard.writeText(command).then(() => {
      alert('Command copied to clipboard!');
    }).catch(err => {
      alert('Failed to copy: ' + err.message);
    });
  }
  
  document.getElementById('notification-settings').addEventListener('submit', (e) => {
    e.preventDefault();
    alert('Notification settings saved (not yet implemented in backend)');
  });
  
  function clearOldLogs() {
    if (confirm('Clear logs older than 30 days?')) {
      alert('Log cleanup not yet implemented');
    }
  }
  
  function exportDatabase() {
    alert('Database export not yet implemented');
  }
  
  function resetSystem() {
    if (confirm('This will remove all agents, workflows, and logs. Are you sure?')) {
      if (confirm('This action cannot be undone. Please confirm again.')) {
        alert('System reset not yet implemented');
      }
    }
  }
  </script>
</body>
</html>