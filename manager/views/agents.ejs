<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('partials/head') %>
</head>
<body>
  <%- include('partials/nav') %>
  
  <main class="main-content">
    <div class="container">
      <div class="page-header">
        <h2>Agents</h2>
        <button class="btn btn-primary" onclick="showTokenDialog()">Generate Registration Token</button>
      </div>

      <div id="token-dialog" class="modal" style="display: none;">
        <div class="modal-content">
          <h3>Generate Registration Token</h3>
          <p>Optionally specify the agent's API address for HTTP calls (e.g., 192.168.1.50:8088 or agent1.internal:8088)</p>
          <div class="form-group">
            <label for="api-address">Agent API Address (optional):</label>
            <input type="text" id="api-address" placeholder="Leave empty to auto-detect" />
            <small>If empty, will auto-detect from WebSocket connection</small>
          </div>
          <div class="modal-actions">
            <button class="btn btn-primary" onclick="generateToken()">Generate Token</button>
            <button class="btn" onclick="hideTokenDialog()">Cancel</button>
          </div>
        </div>
      </div>

      <div id="token-display" class="token-display" style="display: none;">
        <h3>Registration Token</h3>
        <p>Use this token to register a new agent:</p>
        <code id="token-value"></code>
        <p class="token-command">Run agent with: <code>./nodes -token <span id="token-cmd"></span></code></p>
        <p id="api-address-info" style="display: none;" class="info-message">API Address: <code id="api-address-value"></code></p>
      </div>
      
      <div class="agents-grid">
        <% if (agents.length === 0) { %>
          <div class="no-data">
            <p>No agents registered yet</p>
            <p>Generate a registration token and start an agent to begin</p>
          </div>
        <% } else { %>
          <% agents.forEach(agent => { %>
            <div class="agent-card <%= agent.status %>">
              <div class="agent-header">
                <h3><%= agent.metadata?.hostname || agent.id %></h3>
                <span class="status-badge <%= agent.status %>"><%= agent.status %></span>
              </div>
              <div class="agent-details">
                <div class="detail-row">
                  <span class="label">ID:</span>
                  <span class="value"><%= agent.id %></span>
                </div>
                <div class="detail-row">
                  <span class="label">Platform:</span>
                  <span class="value"><%= agent.metadata?.platform || 'Unknown' %></span>
                </div>
                <div class="detail-row">
                  <span class="label">Last Heartbeat:</span>
                  <span class="value"><%= agent.last_seen ? new Date(agent.last_seen).toLocaleString() : 'Never' %></span>
                </div>
                <div class="detail-row">
                  <span class="label">Workflows:</span>
                  <span class="value"><%= agent.config.workflows ? agent.config.workflows.length : 0 %></span>
                </div>
              </div>
              <div class="agent-actions">
                <button class="btn btn-sm" onclick="viewAgent('<%= agent.id %>')">View</button>
                <button class="btn btn-sm btn-danger" onclick="removeAgent('<%= agent.id %>')">Remove</button>
              </div>
            </div>
          <% }) %>
        <% } %>
      </div>
    </div>
  </main>
  
  <%- include('partials/footer') %>
  
  <script>
  function showTokenDialog() {
    document.getElementById('token-dialog').style.display = 'flex';
    document.getElementById('api-address').value = '';
  }

  function hideTokenDialog() {
    document.getElementById('token-dialog').style.display = 'none';
  }

  function generateToken() {
    let apiAddress = document.getElementById('api-address').value.trim();

    // Strip http:// or https:// prefix if present
    apiAddress = apiAddress.replace(/^https?:\/\//, '');

    fetch('/api/tokens', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        expiresIn: 3600000,
        apiAddress: apiAddress || undefined
      })
    })
    .then(r => r.json())
    .then(data => {
      hideTokenDialog();
      document.getElementById('token-display').style.display = 'block';
      document.getElementById('token-value').textContent = data.token;
      document.getElementById('token-cmd').textContent = data.token;

      if (apiAddress) {
        document.getElementById('api-address-info').style.display = 'block';
        document.getElementById('api-address-value').textContent = apiAddress;
      } else {
        document.getElementById('api-address-info').style.display = 'none';
      }
    })
    .catch(err => alert('Failed to generate token: ' + err.message));
  }
  
  function viewAgent(id) {
    window.location.href = `/agents/${id}`;
  }
  
  function configureAgent(id) {
    window.location.href = `/agents/${id}/configure`;
  }
  
  function removeAgent(id) {
    if (confirm('Are you sure you want to remove this agent?')) {
      fetch(`/api/agents/${id}`, {
        method: 'DELETE'
      })
      .then(r => r.json())
      .then(data => {
        alert('Agent removed successfully');
        window.location.reload();
      })
      .catch(err => alert('Failed to remove agent: ' + err.message));
    }
  }
  </script>
</body>
</html>