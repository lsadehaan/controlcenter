<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %> - Control Center</title>
  <link rel="stylesheet" href="/css/style.css">
  <style>
    .tabs {
      display: flex;
      border-bottom: 2px solid #ddd;
      margin-bottom: 20px;
    }
    .tab {
      padding: 10px 20px;
      cursor: pointer;
      border: none;
      background: none;
      font-size: 16px;
      border-bottom: 3px solid transparent;
    }
    .tab.active {
      border-bottom-color: #007bff;
      color: #007bff;
      font-weight: bold;
    }
    .tab-content {
      display: none;
    }
    .tab-content.active {
      display: block;
    }
    .log-viewer {
      background: #1e1e1e;
      color: #d4d4d4;
      padding: 15px;
      border-radius: 4px;
      font-family: 'Courier New', monospace;
      font-size: 13px;
      max-height: 600px;
      overflow-y: auto;
    }
    .log-entry {
      margin-bottom: 8px;
      padding: 4px;
      border-left: 3px solid transparent;
    }
    .log-entry.error { border-left-color: #f44336; background: rgba(244, 67, 54, 0.1); }
    .log-entry.warn { border-left-color: #ff9800; background: rgba(255, 152, 0, 0.1); }
    .log-entry.info { border-left-color: #2196f3; }
    .log-entry.debug { border-left-color: #9e9e9e; opacity: 0.7; }
    .log-timestamp { color: #858585; margin-right: 10px; }
    .log-level {
      display: inline-block;
      padding: 2px 6px;
      border-radius: 3px;
      font-weight: bold;
      margin-right: 10px;
      min-width: 50px;
      text-align: center;
    }
    .log-level.error { background: #f44336; color: white; }
    .log-level.warn { background: #ff9800; color: white; }
    .log-level.info { background: #2196f3; color: white; }
    .log-level.debug { background: #9e9e9e; color: white; }
    .log-message { color: #d4d4d4; }
    .log-metadata {
      margin-top: 4px;
      padding-left: 20px;
      color: #858585;
      font-size: 12px;
    }
    .log-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 15px;
      flex-wrap: wrap;
    }
    .pagination {
      display: flex;
      gap: 10px;
      align-items: center;
      margin-top: 15px;
    }
    .metric-card {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 4px;
      margin-bottom: 15px;
    }
    .metric-card h4 {
      margin-top: 0;
      color: #495057;
    }
    .metric-row {
      display: flex;
      justify-content: space-between;
      padding: 8px 0;
      border-bottom: 1px solid #dee2e6;
    }
    .metric-row:last-child {
      border-bottom: none;
    }
    .workflow-execution {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 4px;
      margin-bottom: 10px;
      border-left: 4px solid #28a745;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .workflow-execution:hover {
      background: #e9ecef;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .workflow-execution.failed {
      border-left-color: #dc3545;
    }
    .workflow-execution.running {
      border-left-color: #ffc107;
    }
    .workflow-execution.completed {
      border-left-color: #28a745;
    }
    .workflow-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 10px;
    }
    .workflow-title {
      display: flex;
      align-items: center;
      gap: 10px;
      flex: 1;
    }
    .workflow-title h4 {
      margin: 0;
      font-size: 16px;
      color: #212529;
    }
    .workflow-title .workflow-id {
      font-size: 12px;
      color: #6c757d;
      font-family: monospace;
    }
    .workflow-meta {
      display: flex;
      gap: 15px;
      font-size: 13px;
      color: #495057;
      flex-wrap: wrap;
    }
    .workflow-meta-item {
      display: flex;
      align-items: center;
      gap: 5px;
    }
    .workflow-details {
      display: none;
      margin-top: 15px;
      padding-top: 15px;
      border-top: 1px solid #dee2e6;
    }
    .workflow-details.expanded {
      display: block;
    }
    .step-list {
      list-style: none;
      padding: 0;
      margin: 10px 0;
    }
    .step-item {
      padding: 8px;
      margin-bottom: 5px;
      background: white;
      border-radius: 3px;
      border-left: 3px solid #28a745;
      font-size: 13px;
    }
    .step-item.failed {
      border-left-color: #dc3545;
      background: #fff5f5;
    }
    .status-badge {
      display: inline-block;
      padding: 3px 8px;
      border-radius: 3px;
      font-size: 11px;
      font-weight: 600;
      text-transform: uppercase;
    }
    .status-badge.completed {
      background: #d4edda;
      color: #155724;
    }
    .status-badge.failed {
      background: #f8d7da;
      color: #721c24;
    }
    .status-badge.running {
      background: #fff3cd;
      color: #856404;
    }
    .trigger-badge {
      display: inline-flex;
      align-items: center;
      gap: 4px;
      padding: 3px 8px;
      border-radius: 3px;
      font-size: 11px;
      background: #e7f3ff;
      color: #004085;
    }
    .execution-filters {
      display: flex;
      gap: 10px;
      margin-bottom: 15px;
      flex-wrap: wrap;
      align-items: center;
    }
    .execution-filters select,
    .execution-filters input {
      padding: 6px 10px;
      border: 1px solid #ced4da;
      border-radius: 4px;
      font-size: 14px;
    }
    .execution-stats {
      background: #e7f3ff;
      padding: 12px;
      border-radius: 4px;
      margin-bottom: 15px;
      display: flex;
      gap: 20px;
      flex-wrap: wrap;
      font-size: 13px;
    }
    .execution-stats .stat {
      display: flex;
      align-items: center;
      gap: 5px;
    }
    .execution-stats .stat-value {
      font-weight: bold;
      color: #004085;
    }
    .execution-pagination {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 15px;
      padding-top: 15px;
      border-top: 1px solid #dee2e6;
    }
    .error-details {
      background: #fff5f5;
      border: 1px solid #f8d7da;
      border-radius: 4px;
      padding: 10px;
      margin-top: 10px;
      font-family: 'Courier New', monospace;
      font-size: 12px;
      color: #721c24;
      white-space: pre-wrap;
    }
    .context-viewer {
      background: #f8f9fa;
      border: 1px solid #dee2e6;
      border-radius: 4px;
      padding: 10px;
      margin-top: 10px;
      font-family: 'Courier New', monospace;
      font-size: 12px;
      max-height: 200px;
      overflow-y: auto;
    }
    .auto-refresh-control {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 13px;
    }
    .auto-refresh-control input[type="checkbox"] {
      width: 18px;
      height: 18px;
      cursor: pointer;
    }
    .view-toggle {
      display: flex;
      gap: 5px;
    }
    .view-toggle button {
      padding: 4px 10px;
      font-size: 12px;
      border: 1px solid #ced4da;
      background: white;
      cursor: pointer;
      border-radius: 3px;
    }
    .view-toggle button.active {
      background: #007bff;
      color: white;
      border-color: #007bff;
    }
    .file-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .file-item {
      display: flex;
      align-items: center;
      padding: 10px;
      border-bottom: 1px solid #dee2e6;
      cursor: pointer;
      transition: background 0.2s;
    }
    .file-item:hover {
      background: #f8f9fa;
    }
    .file-item.directory {
      font-weight: 500;
    }
    .file-icon {
      font-size: 20px;
      margin-right: 12px;
      min-width: 24px;
      text-align: center;
    }
    .file-name {
      flex: 1;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    .file-size {
      color: #6c757d;
      font-size: 13px;
      margin-right: 15px;
      min-width: 80px;
      text-align: right;
    }
    .file-date {
      color: #6c757d;
      font-size: 13px;
      margin-right: 15px;
      min-width: 140px;
    }
    .file-actions {
      display: flex;
      gap: 5px;
    }
    .file-action-btn {
      padding: 4px 8px;
      font-size: 12px;
      border: 1px solid #ced4da;
      background: white;
      cursor: pointer;
      border-radius: 3px;
      transition: all 0.2s;
    }
    .file-action-btn:hover {
      background: #e9ecef;
    }
    .file-action-btn.delete {
      color: #dc3545;
      border-color: #dc3545;
    }
    .file-action-btn.delete:hover {
      background: #dc3545;
      color: white;
    }
    .breadcrumb-link {
      color: #007bff;
      cursor: pointer;
      text-decoration: none;
    }
    .breadcrumb-link:hover {
      text-decoration: underline;
    }
  </style>
</head>
<body>
  <nav class="navbar">
    <div class="nav-container">
      <div class="nav-brand">
        <h1>Control Center</h1>
      </div>
      <ul class="nav-menu">
        <li><a href="/">Dashboard</a></li>
        <li><a href="/agents" class="active">Agents</a></li>
        <li><a href="/workflows">Workflows</a></li>
        <li><a href="/workflow-editor">Editor</a></li>
        <li><a href="/alerts">Alerts</a></li>
        <li><a href="/logs">Logs</a></li>
        <li><a href="/settings">Settings</a></li>
      </ul>
    </div>
  </nav>

  <main class="main-content">
    <div class="container">
      <div class="page-header">
        <h2>Agent: <%= agent.id %></h2>
        <div>
          <span class="status-badge <%= agent.status %>"><%= agent.status %></span>
        </div>
      </div>

      <div class="tabs">
        <button class="tab active" onclick="switchTab('overview')">Overview</button>
        <button class="tab" onclick="switchTab('logs')">Logs</button>
        <button class="tab" onclick="switchTab('workflows')">Workflows</button>
        <button class="tab" onclick="switchTab('metrics')">Metrics</button>
        <button class="tab" onclick="switchTab('files')">Files</button>
        <a href="/agents/<%= agent.id %>/filewatcher" class="tab" style="text-decoration: none;">File Watchers</a>
        <a href="/agents/<%= agent.id %>/configure" class="tab" style="text-decoration: none;">Configure</a>
      </div>

      <!-- Overview Tab -->
      <div id="overview-tab" class="tab-content active">
        <!-- Agent Commands -->
        <div class="metric-card" style="margin-bottom: 20px;">
          <h4>Agent Commands</h4>
          <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-top: 10px;">
            <button class="btn" onclick="sendCommand('reload-config')">Reload Config</button>
            <button class="btn" onclick="sendCommand('git-pull')">Git Pull</button>
            <button class="btn" onclick="sendCommand('reload-filewatcher')">Reload File Watcher</button>
          </div>
          <div style="margin-top: 15px; padding-top: 15px; border-top: 1px solid #dee2e6;">
            <label style="display: block; margin-bottom: 8px; font-weight: 500;">Log Level:</label>
            <div style="display: flex; gap: 10px; align-items: center;">
              <select id="log-level-select" class="form-control" style="max-width: 150px;">
                <option value="debug">Debug</option>
                <option value="info" selected>Info</option>
                <option value="warn">Warning</option>
                <option value="error">Error</option>
              </select>
              <button class="btn" onclick="setLogLevel()">Set Log Level</button>
            </div>
          </div>
          <div id="command-result" style="margin-top: 10px; padding: 10px; display: none; border-radius: 4px;"></div>
        </div>

        <div class="metric-card">
          <h4>Agent Information</h4>
          <div class="metric-row">
            <span>Agent ID:</span>
            <strong><%= agent.id %></strong>
          </div>
          <div class="metric-row">
            <span>Hostname:</span>
            <strong><%= agent.hostname || 'N/A' %></strong>
          </div>
          <div class="metric-row">
            <span>Platform:</span>
            <strong><%= agent.platform || 'N/A' %></strong>
          </div>
          <div class="metric-row">
            <span>Status:</span>
            <strong><%= agent.status %></strong>
          </div>
          <div class="metric-row">
            <span>Last Heartbeat:</span>
            <strong><%= agent.last_heartbeat ? new Date(agent.last_heartbeat).toLocaleString() : 'Never' %></strong>
          </div>
          <div class="metric-row">
            <span>Registered:</span>
            <strong><%= agent.registered_at ? new Date(agent.registered_at).toLocaleString() : 'N/A' %></strong>
          </div>
        </div>

        <div class="metric-card">
          <h4>API Configuration</h4>
          <div class="metric-row">
            <span>Connection IP:</span>
            <strong><%= agent.metadata?.connectionIp || 'N/A' %></strong>
          </div>
          <div class="metric-row">
            <span>API Address:</span>
            <strong id="current-api-address"><%= agent.metadata?.apiAddress || 'Auto-detect from connection IP' %></strong>
          </div>
          <div style="margin-top: 15px; padding-top: 15px; border-top: 1px solid #dee2e6;">
            <label style="display: block; margin-bottom: 8px; font-weight: 500;">Update API Address:</label>
            <div style="display: flex; gap: 10px; align-items: center;">
              <input type="text" id="new-api-address" class="form-control" placeholder="e.g., 192.168.1.100:8088" style="flex: 1;">
              <button class="btn" onclick="updateApiAddress()">Update</button>
              <button class="btn" onclick="clearApiAddress()">Clear (Auto-detect)</button>
            </div>
            <small style="color: #666; display: block; margin-top: 5px;">
              Leave empty or click Clear to auto-detect from connection IP. Format: host:port (do not include http://)
            </small>
          </div>
          <div id="api-update-result" style="margin-top: 10px; padding: 10px; display: none; border-radius: 4px;"></div>
        </div>
      </div>

      <!-- Logs Tab -->
      <div id="logs-tab" class="tab-content">
        <div class="log-controls">
          <input type="text" id="log-search" placeholder="Search logs..." style="flex: 1; min-width: 200px;">
          <select id="log-level">
            <option value="">All Levels</option>
            <option value="debug">Debug</option>
            <option value="info">Info</option>
            <option value="warn">Warning</option>
            <option value="error">Error</option>
          </select>
          <select id="log-page-size">
            <option value="50">50 lines</option>
            <option value="100" selected>100 lines</option>
            <option value="200">200 lines</option>
            <option value="500">500 lines</option>
          </select>
          <button class="btn" onclick="loadLogs()">Refresh</button>
          <button class="btn" onclick="downloadLogs()">Download</button>
        </div>

        <div class="log-viewer" id="log-viewer">
          <div style="text-align: center; color: #858585;">
            Click "Refresh" to load logs from agent
          </div>
        </div>

        <div class="pagination" id="log-pagination" style="display: none;">
          <button class="btn" onclick="prevPage()" id="prev-btn">Previous</button>
          <span id="page-info">Page 1 of 1</span>
          <button class="btn" onclick="nextPage()" id="next-btn">Next</button>
        </div>
      </div>

      <!-- Workflows Tab -->
      <div id="workflows-tab" class="tab-content">
        <h3>Workflow Executions</h3>

        <!-- Control Bar -->
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-wrap: wrap; gap: 10px;">
          <div style="display: flex; gap: 10px; align-items: center;">
            <button class="btn" onclick="loadWorkflowExecutions()">🔄 Refresh</button>
            <div class="auto-refresh-control">
              <input type="checkbox" id="auto-refresh-toggle" onchange="toggleAutoRefresh()">
              <label for="auto-refresh-toggle">Auto-refresh</label>
              <select id="auto-refresh-interval" style="padding: 4px 8px; font-size: 13px;" disabled>
                <option value="5000">5s</option>
                <option value="10000" selected>10s</option>
                <option value="30000">30s</option>
                <option value="60000">60s</option>
              </select>
            </div>
          </div>
          <div class="view-toggle">
            <button class="active" onclick="setViewMode('compact')">Compact</button>
            <button onclick="setViewMode('detailed')">Detailed</button>
          </div>
        </div>

        <!-- Filters -->
        <div class="execution-filters">
          <select id="filter-workflow" onchange="applyFilters()">
            <option value="">All Workflows</option>
          </select>
          <select id="filter-status" onchange="applyFilters()">
            <option value="">All Statuses</option>
            <option value="completed">Completed</option>
            <option value="failed">Failed</option>
            <option value="running">Running</option>
          </select>
          <select id="filter-date" onchange="applyFilters()">
            <option value="all">All Time</option>
            <option value="1h">Last Hour</option>
            <option value="24h">Last 24 Hours</option>
            <option value="7d" selected>Last 7 Days</option>
            <option value="30d">Last 30 Days</option>
          </select>
          <input type="text" id="filter-search" placeholder="Search errors, context..." onkeyup="applyFilters()" style="flex: 1; min-width: 200px;">
          <select id="sort-by" onchange="applyFilters()">
            <option value="newest">Newest First</option>
            <option value="oldest">Oldest First</option>
            <option value="duration-desc">Longest Duration</option>
            <option value="duration-asc">Shortest Duration</option>
          </select>
        </div>

        <!-- Statistics -->
        <div class="execution-stats" id="execution-stats" style="display: none;">
          <div class="stat">
            <span>📊 Total:</span>
            <span class="stat-value" id="stat-total">0</span>
          </div>
          <div class="stat">
            <span>✅ Success:</span>
            <span class="stat-value" style="color: #28a745;" id="stat-success">0</span>
          </div>
          <div class="stat">
            <span>❌ Failed:</span>
            <span class="stat-value" style="color: #dc3545;" id="stat-failed">0</span>
          </div>
          <div class="stat">
            <span>⏱️ Avg Duration:</span>
            <span class="stat-value" id="stat-avg-duration">0s</span>
          </div>
          <div class="stat">
            <span>📈 Success Rate:</span>
            <span class="stat-value" id="stat-success-rate">0%</span>
          </div>
        </div>

        <!-- Executions List -->
        <div id="workflow-executions">
          <p style="color: #666;">Click "Refresh" to view workflow execution history</p>
        </div>

        <!-- Pagination -->
        <div class="execution-pagination" id="execution-pagination" style="display: none;">
          <div>
            <button class="btn" onclick="prevExecutionPage()" id="exec-prev-btn">← Previous</button>
            <button class="btn" onclick="nextExecutionPage()" id="exec-next-btn">Next →</button>
          </div>
          <div id="exec-page-info" style="font-size: 13px; color: #666;">Page 1 of 1</div>
          <div>
            <select id="exec-page-size" onchange="changePageSize()" style="padding: 6px 10px; font-size: 13px;">
              <option value="10" selected>10 per page</option>
              <option value="25">25 per page</option>
              <option value="50">50 per page</option>
              <option value="100">100 per page</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Metrics Tab -->
      <div id="metrics-tab" class="tab-content">
        <button class="btn" onclick="loadMetrics()" style="margin-bottom: 15px;">Refresh Metrics</button>
        <div id="metrics-content">
          <p style="color: #666;">Click "Refresh Metrics" to load agent metrics</p>
        </div>
      </div>

      <!-- Files Tab -->
      <div id="files-tab" class="tab-content">
        <div style="margin-bottom: 15px;">
          <h3>File Browser</h3>
          <p style="color: #666; font-size: 14px;">Browse, download, upload, and manage files on the agent.</p>
        </div>

        <!-- File browser controls -->
        <div style="display: flex; gap: 10px; margin-bottom: 15px; align-items: center;">
          <button class="btn" onclick="loadFileBrowser()">🔄 Refresh</button>
          <button class="btn" onclick="showUploadDialog()">📤 Upload File</button>
          <button class="btn" onclick="showCreateFolderDialog()">📁 New Folder</button>
          <div style="flex: 1;"></div>
          <div id="file-browser-status" style="font-size: 13px; color: #666;"></div>
        </div>

        <!-- Breadcrumb navigation -->
        <div id="breadcrumb" style="background: #f8f9fa; padding: 10px; border-radius: 4px; margin-bottom: 15px; font-size: 14px; display: none;">
          <span style="color: #666;">Path:</span>
          <span id="breadcrumb-path"></span>
        </div>

        <!-- File browser content -->
        <div id="file-browser-content">
          <p style="color: #666;">Click "Refresh" to browse files on the agent</p>
        </div>

        <!-- Upload dialog (hidden by default) -->
        <div id="upload-dialog" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; align-items: center; justify-content: center;">
          <div style="background: white; padding: 30px; border-radius: 8px; max-width: 500px; width: 90%;">
            <h3 style="margin-top: 0;">Upload File</h3>
            <div style="margin-bottom: 15px;">
              <label style="display: block; margin-bottom: 5px;">Destination Path:</label>
              <input type="text" id="upload-path" class="form-control" readonly style="background: #e9ecef;">
            </div>
            <div style="margin-bottom: 20px;">
              <label style="display: block; margin-bottom: 5px;">Select File:</label>
              <input type="file" id="upload-file-input" class="form-control">
            </div>
            <div style="display: flex; gap: 10px; justify-content: flex-end;">
              <button class="btn" onclick="hideUploadDialog()">Cancel</button>
              <button class="btn" onclick="performUpload()" style="background: #007bff; color: white;">Upload</button>
            </div>
            <div id="upload-progress" style="margin-top: 15px; display: none;">
              <div style="background: #e9ecef; border-radius: 4px; overflow: hidden;">
                <div id="upload-progress-bar" style="background: #007bff; height: 30px; width: 0%; transition: width 0.3s; display: flex; align-items: center; justify-content: center; color: white; font-size: 12px;"></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Create folder dialog (hidden by default) -->
        <div id="create-folder-dialog" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; align-items: center; justify-content: center;">
          <div style="background: white; padding: 30px; border-radius: 8px; max-width: 500px; width: 90%;">
            <h3 style="margin-top: 0;">Create Folder</h3>
            <div style="margin-bottom: 15px;">
              <label style="display: block; margin-bottom: 5px;">Parent Path:</label>
              <input type="text" id="create-folder-parent" class="form-control" readonly style="background: #e9ecef;">
            </div>
            <div style="margin-bottom: 20px;">
              <label style="display: block; margin-bottom: 5px;">Folder Name:</label>
              <input type="text" id="create-folder-name" class="form-control" placeholder="New Folder">
            </div>
            <div style="display: flex; gap: 10px; justify-content: flex-end;">
              <button class="btn" onclick="hideCreateFolderDialog()">Cancel</button>
              <button class="btn" onclick="performCreateFolder()" style="background: #007bff; color: white;">Create</button>
            </div>
          </div>
        </div>
      </div>

    </div>
  </main>

  <footer class="footer">
    <p>&copy; 2025 Control Center - Distributed Automation Platform</p>
  </footer>

  <script>
  const agentId = '<%= agent.id %>';
  const agentConfig = <%- JSON.stringify(agent) %>;
  let currentPage = 1;
  let totalPages = 1;

  // Workflow execution state
  let allExecutions = [];
  let filteredExecutions = [];
  let workflowsMap = {};
  let currentExecutionPage = 1;
  let executionsPerPage = 10;
  let viewMode = 'compact';
  let autoRefreshInterval = null;

  function switchTab(tabName) {
    // Hide all tabs
    document.querySelectorAll('.tab-content').forEach(tab => {
      tab.classList.remove('active');
    });
    document.querySelectorAll('.tab').forEach(tab => {
      tab.classList.remove('active');
    });

    // Show selected tab
    document.getElementById(tabName + '-tab').classList.add('active');
    event.target.classList.add('active');
  }

  async function loadLogs(page = 1) {
    const search = document.getElementById('log-search').value;
    const level = document.getElementById('log-level').value;
    const pageSize = document.getElementById('log-page-size').value;

    // Use Manager proxy to fetch logs from agent
    const url = `/api/agents/${agentId}/logs?page=${page}&pageSize=${pageSize}&level=${level}&search=${encodeURIComponent(search)}`;

    try {
      const response = await fetch(url);
      const data = await response.json();

      // Check if response contains an error
      if (data.error) {
        document.getElementById('log-viewer').innerHTML =
          `<div style="color: #f44336;">Error: ${data.error}</div>`;
        return;
      }

      // Check if data structure is valid
      if (!data.logs) {
        document.getElementById('log-viewer').innerHTML =
          '<div style="color: #f44336;">Invalid response from server</div>';
        return;
      }

      currentPage = data.page;
      totalPages = data.totalPages;

      if (data.logs.length === 0) {
        document.getElementById('log-viewer').innerHTML =
          '<div style="color: #858585;">No logs found</div>';
        document.getElementById('log-pagination').style.display = 'none';
        return;
      }

      // Render logs
      let html = '';
      data.logs.forEach(log => {
        const metadata = log.metadata && Object.keys(log.metadata).length > 0
          ? `<div class="log-metadata">${JSON.stringify(log.metadata)}</div>`
          : '';

        html += `
          <div class="log-entry ${log.level}">
            <span class="log-timestamp">${log.timestamp}</span>
            <span class="log-level ${log.level}">${log.level.toUpperCase()}</span>
            <span class="log-message">${escapeHtml(log.message)}</span>
            ${metadata}
          </div>
        `;
      });

      document.getElementById('log-viewer').innerHTML = html;

      // Update pagination
      document.getElementById('page-info').textContent =
        `Page ${data.page} of ${data.totalPages} (${data.totalLines} total lines)`;
      document.getElementById('prev-btn').disabled = data.page === 1;
      document.getElementById('next-btn').disabled = !data.hasMore;
      document.getElementById('log-pagination').style.display = 'flex';

    } catch (error) {
      document.getElementById('log-viewer').innerHTML =
        `<div style="color: #f44336;">Error loading logs: ${error.message}</div>`;
    }
  }

  async function downloadLogs() {
    const level = document.getElementById('log-level').value;
    const search = document.getElementById('log-search').value;

    // Use Manager proxy to download logs from agent
    const url = `/api/agents/${agentId}/logs/download?level=${level}&search=${encodeURIComponent(search)}&limit=50000`;
    window.open(url, '_blank');
  }

  function prevPage() {
    if (currentPage > 1) {
      loadLogs(currentPage - 1);
    }
  }

  function nextPage() {
    if (currentPage < totalPages) {
      loadLogs(currentPage + 1);
    }
  }

  async function loadWorkflowExecutions() {
    try {
      // Fetch workflow configurations first (for names)
      const workflowsResponse = await fetch(`/api/workflows`);
      const workflowsData = await workflowsResponse.json();
      workflowsMap = {};
      workflowsData.forEach(wf => {
        workflowsMap[wf.id] = wf;
      });

      // Populate workflow filter dropdown
      const filterWorkflow = document.getElementById('filter-workflow');
      filterWorkflow.innerHTML = '<option value="">All Workflows</option>';
      workflowsData.forEach(wf => {
        filterWorkflow.innerHTML += `<option value="${wf.id}">${wf.name || wf.id}</option>`;
      });

      // Fetch executions from agent
      const response = await fetch(`/api/agents/${agentId}/workflows/executions`);
      const data = await response.json();

      if (!data.executions || data.executions.length === 0) {
        document.getElementById('workflow-executions').innerHTML =
          '<p style="color: #666;">No workflow executions found</p>';
        document.getElementById('execution-stats').style.display = 'none';
        document.getElementById('execution-pagination').style.display = 'none';
        return;
      }

      allExecutions = data.executions;
      applyFilters();

    } catch (error) {
      document.getElementById('workflow-executions').innerHTML =
        `<div style="color: #f44336;">Error: ${error.message}</div>`;
    }
  }

  function applyFilters() {
    const workflowFilter = document.getElementById('filter-workflow').value;
    const statusFilter = document.getElementById('filter-status').value;
    const dateFilter = document.getElementById('filter-date').value;
    const searchQuery = document.getElementById('filter-search').value.toLowerCase();
    const sortBy = document.getElementById('sort-by').value;

    // Apply filters
    filteredExecutions = allExecutions.filter(exec => {
      // Workflow filter
      if (workflowFilter && exec.workflowId !== workflowFilter) return false;

      // Status filter
      if (statusFilter && exec.status !== statusFilter) return false;

      // Date filter
      if (dateFilter !== 'all') {
        const execTime = new Date(exec.startTime).getTime();
        const now = Date.now();
        const cutoff = {
          '1h': now - (60 * 60 * 1000),
          '24h': now - (24 * 60 * 60 * 1000),
          '7d': now - (7 * 24 * 60 * 60 * 1000),
          '30d': now - (30 * 24 * 60 * 60 * 1000)
        }[dateFilter];
        if (execTime < cutoff) return false;
      }

      // Search filter
      if (searchQuery) {
        const searchableText = [
          exec.error || '',
          JSON.stringify(exec.context || {}),
          exec.workflowId,
          workflowsMap[exec.workflowId]?.name || ''
        ].join(' ').toLowerCase();
        if (!searchableText.includes(searchQuery)) return false;
      }

      return true;
    });

    // Apply sorting
    filteredExecutions.sort((a, b) => {
      const aTime = new Date(a.startTime).getTime();
      const bTime = new Date(b.startTime).getTime();
      const aDuration = a.endTime ? (new Date(a.endTime) - new Date(a.startTime)) / 1000 : 0;
      const bDuration = b.endTime ? (new Date(b.endTime) - new Date(b.startTime)) / 1000 : 0;

      switch (sortBy) {
        case 'newest': return bTime - aTime;
        case 'oldest': return aTime - bTime;
        case 'duration-desc': return bDuration - aDuration;
        case 'duration-asc': return aDuration - bDuration;
        default: return bTime - aTime;
      }
    });

    // Update statistics
    updateStatistics();

    // Reset to page 1 and render
    currentExecutionPage = 1;
    renderExecutions();
  }

  function updateStatistics() {
    const total = filteredExecutions.length;
    const success = filteredExecutions.filter(e => e.status === 'completed').length;
    const failed = filteredExecutions.filter(e => e.status === 'failed').length;

    const durations = filteredExecutions
      .filter(e => e.endTime)
      .map(e => (new Date(e.endTime) - new Date(e.startTime)) / 1000);
    const avgDuration = durations.length > 0
      ? (durations.reduce((a, b) => a + b, 0) / durations.length).toFixed(2)
      : 0;

    const successRate = total > 0 ? ((success / total) * 100).toFixed(1) : 0;

    document.getElementById('stat-total').textContent = total;
    document.getElementById('stat-success').textContent = success;
    document.getElementById('stat-failed').textContent = failed;
    document.getElementById('stat-avg-duration').textContent = avgDuration + 's';
    document.getElementById('stat-success-rate').textContent = successRate + '%';
    document.getElementById('execution-stats').style.display = total > 0 ? 'flex' : 'none';
  }

  function renderExecutions() {
    const start = (currentExecutionPage - 1) * executionsPerPage;
    const end = start + executionsPerPage;
    const pageExecutions = filteredExecutions.slice(start, end);

    if (pageExecutions.length === 0) {
      document.getElementById('workflow-executions').innerHTML =
        '<p style="color: #666;">No executions match the current filters</p>';
      document.getElementById('execution-pagination').style.display = 'none';
      return;
    }

    let html = '';
    pageExecutions.forEach((exec, idx) => {
      html += renderExecutionCard(exec, start + idx);
    });

    document.getElementById('workflow-executions').innerHTML = html;

    // Update pagination
    const totalPages = Math.ceil(filteredExecutions.length / executionsPerPage);
    document.getElementById('exec-page-info').textContent =
      `Page ${currentExecutionPage} of ${totalPages} (${filteredExecutions.length} total)`;
    document.getElementById('exec-prev-btn').disabled = currentExecutionPage === 1;
    document.getElementById('exec-next-btn').disabled = currentExecutionPage >= totalPages;
    document.getElementById('execution-pagination').style.display = 'flex';
  }

  function renderExecutionCard(exec, index) {
    const workflow = workflowsMap[exec.workflowId] || {};
    const workflowName = workflow.name || exec.workflowId;
    const duration = exec.endTime ?
      ((new Date(exec.endTime) - new Date(exec.startTime)) / 1000).toFixed(2) + 's' :
      'Running...';
    const triggerIcon = {
      'file': '📁',
      'filewatcher': '📁',
      'schedule': '📅',
      'webhook': '🔗',
      'manual': '👤'
    }[exec.context?.trigger || 'manual'] || '❓';

    const triggerType = exec.context?.trigger || 'manual';
    const startTime = new Date(exec.startTime);
    const timeAgo = getTimeAgo(startTime);

    let detailsHtml = '';
    if (viewMode === 'detailed' || exec.error) {
      detailsHtml = `
        <div class="workflow-details expanded">
          ${renderExecutionDetails(exec)}
        </div>
      `;
    }

    return `
      <div class="workflow-execution ${exec.status}" onclick="toggleExecutionDetails(${index})">
        <div class="workflow-header">
          <div class="workflow-title">
            <h4>${escapeHtml(workflowName)}</h4>
            <span class="workflow-id" title="${exec.workflowId}">${exec.workflowId.substring(0, 8)}...</span>
            <span class="status-badge ${exec.status}">${exec.status}</span>
          </div>
        </div>
        <div class="workflow-meta">
          <div class="workflow-meta-item">
            <span class="trigger-badge">${triggerIcon} ${triggerType}</span>
          </div>
          <div class="workflow-meta-item">
            ⏱️ ${duration}
          </div>
          <div class="workflow-meta-item">
            🕒 ${timeAgo}
          </div>
          <div class="workflow-meta-item">
            ✓ ${exec.completedSteps ? exec.completedSteps.length : 0} steps
          </div>
        </div>
        ${detailsHtml}
      </div>
    `;
  }

  function renderExecutionDetails(exec) {
    const workflow = workflowsMap[exec.workflowId] || {};
    let html = '';

    // Context information
    if (exec.context && Object.keys(exec.context).length > 0) {
      html += `
        <div style="margin-bottom: 10px;">
          <strong style="font-size: 13px;">Context:</strong>
          <div class="context-viewer">${JSON.stringify(exec.context, null, 2)}</div>
        </div>
      `;
    }

    // Steps
    if (exec.completedSteps && exec.completedSteps.length > 0) {
      html += `
        <div style="margin-bottom: 10px;">
          <strong style="font-size: 13px;">Completed Steps:</strong>
          <ul class="step-list">
      `;
      exec.completedSteps.forEach(stepId => {
        const step = workflow.config?.steps?.find(s => s.id === stepId);
        const stepName = step?.name || stepId;
        html += `<li class="step-item">✓ ${escapeHtml(stepName)} <span style="color: #6c757d; font-family: monospace; font-size: 11px;">(${stepId})</span></li>`;
      });
      html += '</ul></div>';
    }

    // Error details
    if (exec.error) {
      html += `
        <div>
          <strong style="font-size: 13px; color: #dc3545;">Error:</strong>
          <div class="error-details">${escapeHtml(exec.error)}</div>
        </div>
      `;
    }

    // Timing
    html += `
      <div style="margin-top: 10px; font-size: 12px; color: #6c757d;">
        <div><strong>Started:</strong> ${new Date(exec.startTime).toLocaleString()}</div>
        ${exec.endTime ? `<div><strong>Ended:</strong> ${new Date(exec.endTime).toLocaleString()}</div>` : ''}
      </div>
    `;

    return html;
  }

  function toggleExecutionDetails(index) {
    // Prevent default if we're clicking on the card itself
    if (viewMode === 'detailed') return; // Already showing details

    const start = (currentExecutionPage - 1) * executionsPerPage;
    const exec = filteredExecutions[start + index];

    // Re-render just this execution with details toggled
    const cards = document.querySelectorAll('.workflow-execution');
    const card = cards[index];
    const details = card.querySelector('.workflow-details');

    if (details) {
      details.remove();
    } else {
      const detailsDiv = document.createElement('div');
      detailsDiv.className = 'workflow-details expanded';
      detailsDiv.innerHTML = renderExecutionDetails(exec);
      card.appendChild(detailsDiv);
    }
  }

  function getTimeAgo(date) {
    const seconds = Math.floor((Date.now() - date.getTime()) / 1000);
    if (seconds < 60) return `${seconds}s ago`;
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes}m ago`;
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours}h ago`;
    const days = Math.floor(hours / 24);
    return `${days}d ago`;
  }

  function prevExecutionPage() {
    if (currentExecutionPage > 1) {
      currentExecutionPage--;
      renderExecutions();
    }
  }

  function nextExecutionPage() {
    const totalPages = Math.ceil(filteredExecutions.length / executionsPerPage);
    if (currentExecutionPage < totalPages) {
      currentExecutionPage++;
      renderExecutions();
    }
  }

  function changePageSize() {
    executionsPerPage = parseInt(document.getElementById('exec-page-size').value);
    currentExecutionPage = 1;
    renderExecutions();
  }

  function setViewMode(mode) {
    viewMode = mode;
    document.querySelectorAll('.view-toggle button').forEach(btn => {
      btn.classList.remove('active');
    });
    event.target.classList.add('active');
    renderExecutions();
  }

  function toggleAutoRefresh() {
    const checkbox = document.getElementById('auto-refresh-toggle');
    const intervalSelect = document.getElementById('auto-refresh-interval');

    if (checkbox.checked) {
      intervalSelect.disabled = false;
      const interval = parseInt(intervalSelect.value);
      autoRefreshInterval = setInterval(loadWorkflowExecutions, interval);
    } else {
      intervalSelect.disabled = true;
      if (autoRefreshInterval) {
        clearInterval(autoRefreshInterval);
        autoRefreshInterval = null;
      }
    }
  }

  // Stop auto-refresh when leaving the page
  window.addEventListener('beforeunload', () => {
    if (autoRefreshInterval) {
      clearInterval(autoRefreshInterval);
    }
  });

  async function loadMetrics() {
    try {
      // Use Manager proxy to fetch metrics from agent
      const response = await fetch(`/api/agents/${agentId}/metrics`);
      const metrics = await response.json();

      const html = `
        <div class="metric-card">
          <h4>Agent Metrics</h4>
          <div class="metric-row">
            <span>Workflows Loaded:</span>
            <strong>${metrics.workflowsLoaded}</strong>
          </div>
          <div class="metric-row">
            <span>Log File Size:</span>
            <strong>${formatBytes(metrics.logFileSizeBytes)}</strong>
          </div>
          <div class="metric-row">
            <span>State File Size:</span>
            <strong>${formatBytes(metrics.stateFileSizeBytes)}</strong>
          </div>
          <div class="metric-row">
            <span>Platform:</span>
            <strong>${metrics.platform}</strong>
          </div>
          <div class="metric-row">
            <span>Hostname:</span>
            <strong>${metrics.hostname}</strong>
          </div>
        </div>
      `;

      document.getElementById('metrics-content').innerHTML = html;

    } catch (error) {
      document.getElementById('metrics-content').innerHTML =
        `<div style="color: #f44336;">Error: ${error.message}</div>`;
    }
  }

  function formatBytes(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  async function sendCommand(command, payload = {}) {
    const resultDiv = document.getElementById('command-result');
    resultDiv.style.display = 'block';
    resultDiv.style.background = '#fff3cd';
    resultDiv.style.color = '#856404';
    resultDiv.textContent = `Sending ${command} command...`;

    try {
      const response = await fetch(`/api/agents/${agentId}/command`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ command, ...payload })
      });

      const data = await response.json();

      if (response.ok) {
        resultDiv.style.background = '#d4edda';
        resultDiv.style.color = '#155724';
        resultDiv.textContent = `✓ Command ${command} sent successfully`;
        setTimeout(() => resultDiv.style.display = 'none', 5000);
      } else {
        resultDiv.style.background = '#f8d7da';
        resultDiv.style.color = '#721c24';
        resultDiv.textContent = `✗ Failed: ${data.error || 'Unknown error'}`;
      }
    } catch (error) {
      resultDiv.style.background = '#f8d7da';
      resultDiv.style.color = '#721c24';
      resultDiv.textContent = `✗ Error: ${error.message}`;
    }
  }

  async function setLogLevel() {
    const select = document.getElementById('log-level-select');
    const level = select.value;
    await sendCommand('set-log-level', { level });
  }

  async function updateApiAddress() {
    let apiAddress = document.getElementById('new-api-address').value.trim();

    if (!apiAddress) {
      alert('Please enter an API address or click "Clear" to use auto-detect');
      return;
    }

    // Strip http:// or https:// prefix if present
    apiAddress = apiAddress.replace(/^https?:\/\//, '');

    const resultDiv = document.getElementById('api-update-result');
    resultDiv.style.display = 'block';
    resultDiv.style.background = '#fff3cd';
    resultDiv.style.color = '#856404';
    resultDiv.textContent = 'Updating API address...';

    try {
      const response = await fetch(`/api/agents/${agentId}/api-address`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ apiAddress })
      });

      const data = await response.json();

      if (response.ok) {
        resultDiv.style.background = '#d4edda';
        resultDiv.style.color = '#155724';
        resultDiv.textContent = '✓ API address updated successfully';
        document.getElementById('current-api-address').textContent = apiAddress;
        document.getElementById('new-api-address').value = '';
        setTimeout(() => resultDiv.style.display = 'none', 5000);
      } else {
        resultDiv.style.background = '#f8d7da';
        resultDiv.style.color = '#721c24';
        resultDiv.textContent = `✗ Failed: ${data.error || 'Unknown error'}`;
      }
    } catch (error) {
      resultDiv.style.background = '#f8d7da';
      resultDiv.style.color = '#721c24';
      resultDiv.textContent = `✗ Error: ${error.message}`;
    }
  }

  async function clearApiAddress() {
    const resultDiv = document.getElementById('api-update-result');
    resultDiv.style.display = 'block';
    resultDiv.style.background = '#fff3cd';
    resultDiv.style.color = '#856404';
    resultDiv.textContent = 'Clearing API address...';

    try {
      const response = await fetch(`/api/agents/${agentId}/api-address`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ apiAddress: null })
      });

      const data = await response.json();

      if (response.ok) {
        resultDiv.style.background = '#d4edda';
        resultDiv.style.color = '#155724';
        resultDiv.textContent = '✓ API address cleared - now using auto-detect';
        document.getElementById('current-api-address').textContent = 'Auto-detect from connection IP';
        document.getElementById('new-api-address').value = '';
        setTimeout(() => resultDiv.style.display = 'none', 5000);
      } else {
        resultDiv.style.background = '#f8d7da';
        resultDiv.style.color = '#721c24';
        resultDiv.textContent = `✗ Failed: ${data.error || 'Unknown error'}`;
      }
    } catch (error) {
      resultDiv.style.background = '#f8d7da';
      resultDiv.style.color = '#721c24';
      resultDiv.textContent = `✗ Error: ${error.message}`;
    }
  }

  // File Browser State
  let currentPath = '';

  async function loadFileBrowser(path = '') {
    currentPath = path;
    const statusDiv = document.getElementById('file-browser-status');
    const contentDiv = document.getElementById('file-browser-content');

    statusDiv.textContent = 'Loading...';
    statusDiv.style.color = '#666';

    try {
      const url = `/api/agents/${agentId}/files/browse?path=${encodeURIComponent(path)}`;
      const response = await fetch(url);
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to browse directory');
      }

      renderFileBrowser(data);
      statusDiv.textContent = `${data.files?.length || 0} items`;
      statusDiv.style.color = '#28a745';

    } catch (error) {
      contentDiv.innerHTML = `<div style="color: #dc3545; padding: 20px; text-align: center;">❌ Error: ${escapeHtml(error.message)}</div>`;
      statusDiv.textContent = 'Error';
      statusDiv.style.color = '#dc3545';
    }
  }

  function renderFileBrowser(data) {
    const contentDiv = document.getElementById('file-browser-content');
    const breadcrumbDiv = document.getElementById('breadcrumb');
    const breadcrumbPath = document.getElementById('breadcrumb-path');

    // Update breadcrumb
    if (data.path) {
      breadcrumbDiv.style.display = 'block';
      breadcrumbPath.innerHTML = renderBreadcrumb(data.path);
    } else {
      breadcrumbDiv.style.display = 'none';
    }

    if (!data.files || data.files.length === 0) {
      contentDiv.innerHTML = '<div style="color: #666; padding: 20px; text-align: center;">📁 Empty directory</div>';
      return;
    }

    // Sort: directories first, then files
    const sorted = data.files.sort((a, b) => {
      if (a.isDir && !b.isDir) return -1;
      if (!a.isDir && b.isDir) return 1;
      return a.name.localeCompare(b.name);
    });

    let html = '<ul class="file-list">';

    sorted.forEach(item => {
      const icon = item.isDir ? '📁' : getFileIcon(item.name);
      const sizeText = item.isDir ? '' : formatBytes(item.size);
      const dateText = item.modTime ? new Date(item.modTime).toLocaleString() : '';
      const itemPath = data.path ? `${data.path}/${item.name}` : item.name;

      html += `
        <li class="file-item ${item.isDir ? 'directory' : 'file'}">
          <span class="file-icon">${icon}</span>
          <span class="file-name" onclick="${item.isDir ? `loadFileBrowser('${escapeJsString(itemPath)}')` : ''}" style="${item.isDir ? 'cursor: pointer;' : ''}">
            ${escapeHtml(item.name)}
          </span>
          <span class="file-size">${sizeText}</span>
          <span class="file-date">${dateText}</span>
          <div class="file-actions">
            ${!item.isDir ? `<button class="file-action-btn" onclick="downloadFile('${escapeJsString(itemPath)}', '${escapeJsString(item.name)}')">⬇️ Download</button>` : ''}
            <button class="file-action-btn delete" onclick="deleteFileOrFolder('${escapeJsString(itemPath)}', ${item.isDir})">🗑️ Delete</button>
          </div>
        </li>
      `;
    });

    html += '</ul>';
    contentDiv.innerHTML = html;
  }

  function renderBreadcrumb(path) {
    if (!path) return '<a class="breadcrumb-link" onclick="loadFileBrowser(\'\')">Home</a>';

    const parts = path.split('/').filter(p => p);
    let html = '<a class="breadcrumb-link" onclick="loadFileBrowser(\'\')">Home</a>';
    let accumulated = '';

    parts.forEach((part, idx) => {
      accumulated += (accumulated ? '/' : '') + part;
      const isLast = idx === parts.length - 1;
      if (isLast) {
        html += ` / <span style="color: #212529;">${escapeHtml(part)}</span>`;
      } else {
        html += ` / <a class="breadcrumb-link" onclick="loadFileBrowser('${escapeJsString(accumulated)}')">${escapeHtml(part)}</a>`;
      }
    });

    return html;
  }

  function getFileIcon(filename) {
    const ext = filename.split('.').pop().toLowerCase();
    const icons = {
      'txt': '📄', 'md': '📄', 'log': '📄',
      'js': '📜', 'json': '📜', 'ts': '📜', 'go': '📜', 'py': '📜',
      'jpg': '🖼️', 'jpeg': '🖼️', 'png': '🖼️', 'gif': '🖼️',
      'zip': '📦', 'tar': '📦', 'gz': '📦',
      'exe': '⚙️', 'dll': '⚙️', 'so': '⚙️',
      'pdf': '📕', 'doc': '📘', 'docx': '📘'
    };
    return icons[ext] || '📄';
  }

  async function downloadFile(path, filename) {
    try {
      const url = `/api/agents/${agentId}/files/download?path=${encodeURIComponent(path)}`;
      const response = await fetch(url);

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || 'Download failed');
      }

      const blob = await response.blob();
      const downloadUrl = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = downloadUrl;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(downloadUrl);

    } catch (error) {
      alert('Download failed: ' + error.message);
    }
  }

  async function deleteFileOrFolder(path, isDir) {
    const itemType = isDir ? 'folder' : 'file';
    if (!confirm(`Are you sure you want to delete this ${itemType}?\n\n${path}`)) {
      return;
    }

    try {
      const url = `/api/agents/${agentId}/files/delete?path=${encodeURIComponent(path)}`;
      const response = await fetch(url, { method: 'DELETE' });
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Delete failed');
      }

      alert(`✓ ${itemType.charAt(0).toUpperCase() + itemType.slice(1)} deleted successfully`);
      loadFileBrowser(currentPath);

    } catch (error) {
      alert('Delete failed: ' + error.message);
    }
  }

  function showUploadDialog() {
    document.getElementById('upload-path').value = currentPath || '/';
    document.getElementById('upload-file-input').value = '';
    document.getElementById('upload-dialog').style.display = 'flex';
    document.getElementById('upload-progress').style.display = 'none';
  }

  function hideUploadDialog() {
    document.getElementById('upload-dialog').style.display = 'none';
  }

  async function performUpload() {
    const fileInput = document.getElementById('upload-file-input');
    const file = fileInput.files[0];

    if (!file) {
      alert('Please select a file to upload');
      return;
    }

    const progressDiv = document.getElementById('upload-progress');
    const progressBar = document.getElementById('upload-progress-bar');
    progressDiv.style.display = 'block';
    progressBar.style.width = '0%';
    progressBar.textContent = '0%';

    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('path', currentPath);

      const url = `/api/agents/${agentId}/files/upload`;

      const xhr = new XMLHttpRequest();

      xhr.upload.addEventListener('progress', (e) => {
        if (e.lengthComputable) {
          const percent = Math.round((e.loaded / e.total) * 100);
          progressBar.style.width = percent + '%';
          progressBar.textContent = percent + '%';
        }
      });

      xhr.addEventListener('load', () => {
        if (xhr.status >= 200 && xhr.status < 300) {
          alert('✓ File uploaded successfully');
          hideUploadDialog();
          loadFileBrowser(currentPath);
        } else {
          const data = JSON.parse(xhr.responseText);
          alert('Upload failed: ' + (data.error || 'Unknown error'));
          progressDiv.style.display = 'none';
        }
      });

      xhr.addEventListener('error', () => {
        alert('Upload failed: Network error');
        progressDiv.style.display = 'none';
      });

      xhr.open('POST', url);
      xhr.send(formData);

    } catch (error) {
      alert('Upload failed: ' + error.message);
      progressDiv.style.display = 'none';
    }
  }

  function showCreateFolderDialog() {
    document.getElementById('create-folder-parent').value = currentPath || '/';
    document.getElementById('create-folder-name').value = '';
    document.getElementById('create-folder-dialog').style.display = 'flex';
  }

  function hideCreateFolderDialog() {
    document.getElementById('create-folder-dialog').style.display = 'none';
  }

  async function performCreateFolder() {
    const folderName = document.getElementById('create-folder-name').value.trim();

    if (!folderName) {
      alert('Please enter a folder name');
      return;
    }

    const newPath = currentPath ? `${currentPath}/${folderName}` : folderName;

    try {
      const url = `/api/agents/${agentId}/files/mkdir?path=${encodeURIComponent(newPath)}`;
      const response = await fetch(url, { method: 'POST' });
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Create folder failed');
      }

      alert('✓ Folder created successfully');
      hideCreateFolderDialog();
      loadFileBrowser(currentPath);

    } catch (error) {
      alert('Create folder failed: ' + error.message);
    }
  }

  function escapeJsString(str) {
    return str.replace(/\\/g, '\\\\').replace(/'/g, "\\'").replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r');
  }
  </script>
</body>
</html>
