name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  GO_VERSION: '>=1.25.1'
  NODE_VERSION: '24'

jobs:
  # Security scanning job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v5

      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and test Manager (Node.js)
  build-manager:
    name: Build Manager
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./manager

    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: manager/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npx eslint . --ext .js --ignore-path .gitignore || true

      - name: Check for vulnerabilities
        run: npm audit --audit-level=high || true

      - name: Build
        run: |
          echo "No build step required for Express app"
          echo "Checking if server starts..."
          timeout 5 npm start || true

  # Build and test Nodes (Go)
  build-nodes:
    name: Build Nodes
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./nodes
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Run staticcheck
        uses: dominikh/staticcheck-action@v1
        with:
          working-directory: ./nodes

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./... || true

      - name: Build binary
        run: |
          go build -v -o agent${{ matrix.os == 'windows-latest' && '.exe' || '' }} .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: agent-${{ matrix.os }}
          path: nodes/agent${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  # Release job - only runs on release
  release:
    name: Release
    needs: [security-scan, build-manager, build-nodes]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./artifacts

      - name: Create release archives
        run: |
          # Package Manager
          cd manager
          tar -czf ../manager-${{ github.event.release.tag_name }}.tar.gz --exclude=node_modules --exclude=data .
          cd ..

          # Package each agent binary
          for dir in artifacts/agent-*; do
            platform=$(basename $dir | sed 's/agent-//')
            cd $dir
            if [[ "$platform" == "windows-latest" ]]; then
              zip ../../agent-windows-${{ github.event.release.tag_name }}.zip agent.exe
            elif [[ "$platform" == "macos-latest" ]]; then
              tar -czf ../../agent-macos-${{ github.event.release.tag_name }}.tar.gz agent
            else
              tar -czf ../../agent-linux-${{ github.event.release.tag_name }}.tar.gz agent
            fi
            cd ../..
          done

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            manager-*.tar.gz
            agent-*.tar.gz
            agent-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Docker build and push to GitHub Container Registry
  docker:
    name: Docker Build
    needs: [build-manager, build-nodes]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/controlcenter-manager
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Manager Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./manager
          file: ./manager/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/controlcenter-manager:latest
            ghcr.io/${{ github.repository_owner }}/controlcenter-manager:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.description=Control Center Manager - Web UI and API
            org.opencontainers.image.licenses=AGPL-3.0
        continue-on-error: true

      - name: Build and push Agent Docker image (for Kubernetes)
        uses: docker/build-push-action@v6
        with:
          context: ./nodes
          file: ./nodes/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/controlcenter-nodes:latest
            ghcr.io/${{ github.repository_owner }}/controlcenter-nodes:k8s-${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.description=Control Center Agent - For Kubernetes/Testing only
            org.opencontainers.image.licenses=AGPL-3.0
        continue-on-error: true